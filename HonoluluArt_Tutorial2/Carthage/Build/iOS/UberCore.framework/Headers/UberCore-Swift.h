// Generated by Apple Swift version 4.2 effective-4.1.50 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UberCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UBSDKScope;
@class NSCoder;

/// Stores information about an access token used for authorizing requests.
/// This class implements NSCoding, but its representation is an internal representation
/// not compatible with the OAuth representation. Use an initializer if you want to serialize this
/// via an OAuth representation.
SWIFT_CLASS_NAMED("AccessToken")
@interface UBSDKAccessToken : NSObject <NSCoding>
/// String containing the bearer token.
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenString;
/// String containing the refresh token.
@property (nonatomic, readonly, copy) NSString * _Nullable refreshToken;
/// The expiration date for this access token
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
/// The scopes this token is valid for
@property (nonatomic, readonly, copy) NSArray<UBSDKScope *> * _Nonnull grantedScopes;
/// Initializes an AccessToken with the provided tokenString
/// \param tokenString The access token string
///
- (nonnull instancetype)initWithTokenString:(NSString * _Nonnull)tokenString OBJC_DESIGNATED_INITIALIZER;
/// Initializes an AccessToken with the provided parameters
/// \param tokenString The access token string
///
/// \param refreshToken String containing the refresh token.
///
/// \param expirationDate The expiration date for this access token
///
/// \param grantedScopes The scopes this token is valid for
///
- (nonnull instancetype)initWithTokenString:(NSString * _Nonnull)tokenString refreshToken:(NSString * _Nullable)refreshToken expirationDate:(NSDate * _Nullable)expirationDate grantedScopes:(NSArray<UBSDKScope *> * _Nonnull)grantedScopes OBJC_DESIGNATED_INITIALIZER;
/// Initializes an AccessToken using a dictionary with key/values matching
/// the OAuth access token response.
/// See https://tools.ietf.org/html/rfc6749#section-5.1 for more details.
/// The <code>token_type</code> parameter is not required for this initializer.
/// \param oauthDictionary A dictionary with key/values matching
/// the OAuth access token response.
///
- (nullable instancetype)initWithOauthDictionary:(NSDictionary<NSString *, id> * _Nonnull)oauthDictionary OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the AccessToken. Required to allow for serialization
/// \param coder The NSCoder to encode the access token on
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Factory class to build access tokens
SWIFT_CLASS_NAMED("AccessTokenFactory")
@interface UBSDKAccessTokenFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

/// Protocol for defining a deeplink that can be executed to open an external app
SWIFT_PROTOCOL_NAMED("Deeplinking")
@protocol UBSDKDeeplinking
/// The deeplink URL that the deeplink will execute
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Fallback URLs for the deeplink (eg, a website, alternate app, etc)
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull fallbackURLs;
/// Execute a deeplink to launch into an external app
/// \param completion The completion block to execute once the deeplink has
/// executed. Passes in True if the url was successfully opened, false otherwise.
///
- (void)executeWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("BaseDeeplink")
@interface UBSDKBaseDeeplink : NSObject <UBSDKDeeplinking>
@property (nonatomic, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull fallbackURLs;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nonnull)host path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems OBJC_DESIGNATED_INITIALIZER;
/// Executes the base deeplink, accounting for the possiblity of an alert appearing
/// on iOS 9+
/// \param completion The completion block to execute once the deeplink has
/// executed. Passes in True if the url was successfully opened, false otherwise.
///
- (void)executeWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AppStoreDeeplink")
@interface UBSDKAppStoreDeeplink : UBSDKBaseDeeplink
/// Initializes an App Store Deeplink to bring the user to the appstore
///
/// returns:
/// An initialized AppStoreDeeplink
- (nonnull instancetype)initWithUserAgent:(NSString * _Nullable)userAgent OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nonnull)host path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end


/// A Deeplinking object for authenticating a user via the native Uber app
SWIFT_CLASS_NAMED("AuthenticationDeeplink")
@interface UBSDKAuthenticationDeeplink : UBSDKBaseDeeplink
/// Initializes an Authentication Deeplink to request the provided scopes
/// \param scopes An array of UberScopes you would like to request
///
///
/// returns:
/// An initialized AuthenticationDeeplink
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nonnull)host path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end


/// Base class for authorization flows
SWIFT_CLASS_NAMED("BaseAuthenticator")
@interface UBSDKBaseAuthenticator : NSObject
/// Scopes to request during login
@property (nonatomic, copy) NSArray<UBSDKScope *> * _Nonnull scopes;
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
- (void)consumeResponseWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AuthorizationCodeGrantAuthenticator")
@interface UBSDKAuthorizationCodeGrantAuthenticator : UBSDKBaseAuthenticator
@property (nonatomic, copy) NSString * _Nullable state;
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end



/// An enum to represent the possible callback URI types. Each form of authorization
/// could potentially use a different URI, these are the possible types.
/// <ul>
///   <li>
///     AuthorizationCode: Callback URI to use for Authorization Code Grant flow
///   </li>
///   <li>
///     General:           Callback URI to use for any flow
///   </li>
///   <li>
///     Implicit:          Callback URI to use for Implicit Grant flow
///   </li>
///   <li>
///     Native:            Callback URI to use for Native (SSO) flow
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKCallbackURIType, "CallbackURIType", closed) {
  UBSDKCallbackURITypeAuthorizationCode = 0,
  UBSDKCallbackURITypeGeneral = 1,
  UBSDKCallbackURITypeImplicit = 2,
  UBSDKCallbackURITypeNative = 3,
};

@class NSBundle;
@class WKProcessPool;

/// Class responsible for handling all of the SDK Configuration options. Provides
/// default values for Application-wide configuration properties. All properties are
/// configurable via the respective setter method
SWIFT_CLASS_NAMED("Configuration")
@interface UBSDKConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UBSDKConfiguration * _Nonnull shared;)
+ (UBSDKConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(UBSDKConfiguration * _Nonnull)value;
/// The .plist file to use, default is Info.plist
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull plistName;)
+ (NSString * _Nonnull)plistName SWIFT_WARN_UNUSED_RESULT;
+ (void)setPlistName:(NSString * _Nonnull)value;
/// The bundle that contains the .plist file. Default is the mainBundle()
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
@property (nonatomic, strong) WKProcessPool * _Nonnull processPool;
/// Gets the client ID of this app. Defaults to the value stored in your Application’s
/// plist if not set (UberClientID)
///
/// returns:
/// The string to use for the Client ID
@property (nonatomic, copy) NSString * _Nonnull clientID;
/// Gets the display name of this app. Defaults to the value stored in your Appication’s
/// plist if not set (UberClientID)
///
/// returns:
/// The app’s name
@property (nonatomic, copy) NSString * _Nonnull appDisplayName;
/// Gets the Server Token of this app. Defaults to the value stored in your Appication’s
/// plist if not set (UberServerToken)
/// Optional. Used by the Request Button to get time estimates without requiring
/// login
///
/// returns:
/// The string Representing your app’s server token
@property (nonatomic, copy) NSString * _Nullable serverToken;
/// Gets the default keychain access group to save access tokens to. Advanced setting
/// for sharing access tokens between multiple of your apps. Defaults an empty string
///
/// returns:
/// The default keychain access group to use
@property (nonatomic, copy) NSString * _Nonnull defaultKeychainAccessGroup;
/// Gets the default key to use when saving access tokens to the keychain. Defaults
/// to using “RidesAccessTokenKey”
///
/// returns:
/// The default access token identifier to use
@property (nonatomic, copy) NSString * _Nonnull defaultAccessTokenIdentifier;
/// Returns if sandbox is enabled or not
///
/// returns:
/// true if Sandbox is enabled, false otherwise
@property (nonatomic) BOOL isSandbox;
/// Returns if the fallback to use Authorization Code Grant is enabled. If true,
/// a failed SSO attempt will follow up with an attempt to do Authorization Code Grant
/// (if requesting priveleged scopes). If false, the user will be redirected to the app store
///
/// returns:
/// true if fallback enabled, false otherwise
@property (nonatomic) BOOL useFallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The current version of the SDK as a string
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Resets all of the Configuration’s values to default
+ (void)restoreDefaults;
/// Gets the callback URI of this app. Defaults to the value stored in your Application’s
/// plist if not set (UberCallbackURI)
///
/// returns:
/// The string to use for the Callback URI
- (NSURL * _Nonnull)getCallbackURI SWIFT_WARN_UNUSED_RESULT;
/// Gets the callback URIString of this app. Defaults to the value stored in your Application’s
/// plist if not set (UberCallbackURI)
///
/// returns:
/// The string to use for the Callback URI
- (NSString * _Nonnull)getCallbackURIString SWIFT_WARN_UNUSED_RESULT;
/// Gets the callback URI for the given CallbackURIType. Defaults to the value
/// stored in your Applications’ plist (under the UberCallbackURIs key). If the requested
/// type is not defined in your plist, it will attempt to use the .General type. If the
/// .General type is not defined, it will attempt to use the value stored under the UberCallbackURI key.
/// Throws a fatal error if no value can be determined
/// \param type The CallbackURIType to get a callback string for
///
///
/// returns:
/// The callbackURI for the the requested type
- (NSURL * _Nonnull)getCallbackURIFor:(enum UBSDKCallbackURIType)type SWIFT_WARN_UNUSED_RESULT;
/// Gets the callback URIString for the given CallbackURIType. Defaults to the value
/// stored in your Applications’ plist (under the UberCallbackURIs key). If the requested
/// type is not defined in your plist, it will attempt to use the .General type. If the
/// .General type is not defined, it will attempt to use the value stored under the UberCallbackURI key.
/// Throws a fatal error if no value can be determined
/// \param type The CallbackURIType to get a callback string for
///
///
/// returns:
/// The callbackURIString for the the requested type
- (NSString * _Nonnull)getCallbackURIStringFor:(enum UBSDKCallbackURIType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets a string to use as the Callback URI String. Overwrites the default value provided by
/// the plist. Setting to nil will result in using the default value.
/// If you’re setting a custom value, be sure your app is configured to handle deeplinks
/// from this URI & you’ve added it to the redirect URIs on your Uber developer dashboard
/// \param callbackURI The callback URI String to use
///
- (void)setCallbackURI:(NSURL * _Nullable)callbackURI;
/// Sets a string to use as the Callback URI String for the provided CallbackURIType.
/// Overwrites the default value provided by the plist. Setting to nil will result
/// in using the default value.
/// If you’re setting a custom value, be sure your app is configured to handle deeplinks
/// from this URI & you’ve added it to the redirect URIs on your Uber developer dashboard
/// \param callbackURI The callback URI String to use
///
/// \param type The Callback URI Type to use
///
- (void)setCallbackURI:(NSURL * _Nullable)callbackURI type:(enum UBSDKCallbackURIType)type;
@end

/// Possible deeplink error types
/// <ul>
///   <li>
///     DeeplinkNotFollowed: The user declined a prompt to follow the deeplink (iOS 9+ only)
///   </li>
///   <li>
///     UnableToFollow:      The deeplink attempted to open the url, but failed
///   </li>
///   <li>
///     UnableToOpen:        The application is unable to open the URL.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKDeeplinkErrorType, "DeeplinkErrorType", closed) {
  UBSDKDeeplinkErrorTypeDeeplinkNotFollowed = 0,
  UBSDKDeeplinkErrorTypeUnableToFollow = 1,
  UBSDKDeeplinkErrorTypeUnableToOpen = 2,
};

/// Fallback types for Deeplinks
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKDeeplinkFallbackType, "DeeplinkFallbackType", closed) {
/// Mobile web fallback (m.uber.com)
  UBSDKDeeplinkFallbackTypeMobileWeb = 0,
/// App Store download fallback
  UBSDKDeeplinkFallbackTypeAppStore = 1,
/// No fallback
  UBSDKDeeplinkFallbackTypeNone = 2,
};



/// Defines the implicit grant authorization flow where access token is extracted from redirect fragment.
SWIFT_CLASS_NAMED("ImplicitGrantAuthenticator")
@interface UBSDKImplicitGrantAuthenticator : UBSDKBaseAuthenticator
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end

enum UberButtonColorStyle : NSInteger;

/// Base class for Uber buttons that sets up colors and some constraints.
SWIFT_CLASS_NAMED("UberButton")
@interface UBSDKUberButton : UIButton
@property (nonatomic) enum UberButtonColorStyle colorStyle;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Function responsible for the initial setup of the button.
/// Calls addSubviews(), setContent(), and setConstraints()
- (void)setup;
/// Function responsible for adding all the subviews to the button. Subclasses
/// should override this method and add any necessary subviews.
- (void)addSubviews;
/// Function responsible for updating content on the button. Subclasses should
/// override and do any necessary view setup
- (void)setContent;
/// Function responsible for adding autolayout constriants on the button. Subclasses
/// should override and add any additional autolayout constraints
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UBSDKLoginButtonDelegate;
@class UBSDKLoginManager;
@class UIViewController;
enum LoginButtonState : NSInteger;

/// Button to handle logging in to Uber
SWIFT_CLASS_NAMED("LoginButton")
@interface UBSDKLoginButton : UBSDKUberButton
/// The LoginButtonDelegate for this button
@property (nonatomic, weak) id <UBSDKLoginButtonDelegate> _Nullable delegate;
/// The LoginManager to use for log in
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// The UberScopes to request
@property (nonatomic, copy) NSArray<UBSDKScope *> * _Nonnull scopes;
/// The view controller to present login over. Used
@property (nonatomic, strong) UIViewController * _Nullable presentingViewController;
/// The current LoginButtonState of this button (signed in / signed out)
@property (nonatomic, readonly) enum LoginButtonState buttonState;
- (nonnull instancetype)initWithFrame:(CGRect)frame scopes:(NSArray<UBSDKScope *> * _Nonnull)scopes loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Setup the LoginButton by adding  a target to the button and setting the login completion block
- (void)setup;
/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;
/// Adds the layout constraints for the Login button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Protocol to listen to login button events, such as logging in / out
SWIFT_PROTOCOL_NAMED("LoginButtonDelegate")
@protocol UBSDKLoginButtonDelegate
/// The Login Button attempted to log out
/// \param button The LoginButton involved
///
/// \param success True if log out succeeded, false otherwise
///
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didLogoutWithSuccess:(BOOL)success;
/// THe Login Button completed a login
/// \param button The LoginButton involved
///
/// \param accessToken The access token that
///
/// \param error The error that occured
///
- (void)loginButton:(UBSDKLoginButton * _Nonnull)button didCompleteLoginWithToken:(UBSDKAccessToken * _Nullable)accessToken error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, LoginButtonState, closed) {
  LoginButtonStateSignedIn = 0,
  LoginButtonStateSignedOut = 1,
};

@class UIApplication;

SWIFT_PROTOCOL("_TtP8UberCore13LoginManaging_")
@protocol LoginManaging
/// Function for initializing a login attempt
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
///
- (void)loginWithRequestedScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable, NSError * _Nullable))completion;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 8 and below)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 9+)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param options A dictionary of URL handling options. As passed to the corresponding AppDelegate method.
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)app open:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
/// Called via the RidesAppDelegate when the application is about to enter the foreground. Used to determine
/// if a user abandons Native login without getting an access token.
- (void)applicationWillEnterForeground;
/// Called via the RidesAppDelegate when the application becomes active. Used to determine
/// if a user abandons Native login without getting an access token.
- (void)applicationDidBecomeActive;
@end

enum UBSDKLoginType : NSInteger;

/// Manages user login via SSO, authorization code grant, or implicit grant.
SWIFT_CLASS_NAMED("LoginManager")
@interface UBSDKLoginManager : NSObject <LoginManaging>
/// Create instance of login manager to authenticate user and retreive access token.
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.shared.defaultAccessTokenIdentifier
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.shared.defaultKeychainAccessGroup
///
/// \param loginType The login type to use for logging in, defaults to Implicit
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup loginType:(enum UBSDKLoginType)loginType OBJC_DESIGNATED_INITIALIZER;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Implicit Login Behavior
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
/// \param keychainAccessGroup The keychain access group to use for saving the Access Token, defaults to Configuration.getDefaultKeychainAccessGroup()
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nullable)keychainAccessGroup;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Implicit Login Behavior & your Configuration’s keychain access group
/// \param accessTokenIdentifier The access token identifier to use for saving the Access Token, defaults to Configuration.getDefaultAccessTokenIdentifier()
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the provided LoginType, with the accessTokenIdentifier & keychainAccessGroup defined
/// in your Configuration
/// \param loginType The login behavior to use for logging in
///
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)initWithLoginType:(enum UBSDKLoginType)loginType;
/// Create instance of login manager to authenticate user and retreive access token.
/// Uses the Native LoginType, with the accessTokenIdentifier & keychainAccessGroup defined
/// in your Configuration
///
/// returns:
/// An initialized LoginManager
- (nonnull instancetype)init;
/// Launches view for user to log into Uber account and grant access to requested scopes.
/// Access token (or error) is passed into completion handler.
/// \param scopes scopes being requested.
///
/// \param presentingViewController The presenting view controller present the login view controller over.
///
/// \param completion The LoginManagerRequestTokenHandler completion handler for login success/failure.
///
- (void)loginWithRequestedScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes presentingViewController:(UIViewController * _Nullable)presentingViewController completion:(void (^ _Nullable)(UBSDKAccessToken * _Nullable, NSError * _Nullable))completion;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken.
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting your app to open the URL (url).
/// As passed to the corresponding AppDelegate method (iOS 8)
///
/// \param annotation annotation: A property list object supplied by the source app to communicate
/// information to the receiving app As passed to the corresponding AppDelegate method (iOS 8)
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Called via the RidesAppDelegate when the application is opened via a URL. Responsible
/// for parsing the url and creating an OAuthToken. (iOS 9+)
/// \param application The UIApplication object. Pass in the value from the App Delegate
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param options A dictionary of URL handling options. As passed to the corresponding AppDelegate method.
///
///
/// returns:
/// true if the url was meant to be handled by the SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)app open:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=9.0);
/// Called via the RidesAppDelegate when the application is about to enter the foreground. Used to distinguish
/// calls to applicationDidBecomeActive() that represent a true context switch vs. those that represent system
/// dialogs appearing over the app
- (void)applicationWillEnterForeground;
/// Called via the RidesAppDelegate when the application becomes active. Used to determine
/// if a user abandons Native login without getting an access token.
- (void)applicationDidBecomeActive;
@end


/// The type of behaviour that login manager should use for authentication.
/// <ul>
///   <li>
///     AuthorizationCode: Authorization code grant.
///   </li>
///   <li>
///     Implicit: Implicit grant (only valid for general scope endpoints).
///   </li>
///   <li>
///     Native:   Native login (SSO via the Uber App)
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKLoginType, "LoginType", closed) {
  UBSDKLoginTypeAuthorizationCode = 0,
  UBSDKLoginTypeImplicit = 1,
  UBSDKLoginTypeNative = 2,
};


/// UberAuthenticating object for authenticating a user via the Native Uber app
SWIFT_CLASS_NAMED("NativeAuthenticator")
@interface UBSSONativeAuthenticator : UBSDKBaseAuthenticator
/// Creates a NativeAuthenticator using the provided scopes
/// \param request the URL request.
///
///
/// returns:
/// true if a redirect was handled, false otherwise.
- (nonnull instancetype)initWithScopes:(NSArray<UBSDKScope *> * _Nonnull)scopes OBJC_DESIGNATED_INITIALIZER;
@end

@class NSHTTPURLResponse;
@class UBSDKError;

/// <ul>
///   <li>
///     Struct that packages the response from an executed NSURLRequest.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("Response")
@interface UBSDKResponse : NSObject
/// String representing JSON response data.
@property (nonatomic, copy) NSData * _Nullable data;
/// HTTP status code of response.
@property (nonatomic) NSInteger statusCode;
/// Response metadata.
@property (nonatomic, strong) NSHTTPURLResponse * _Nullable response;
/// NSError representing an optional error.
@property (nonatomic, strong) UBSDKError * _Nullable error;
/// Initialize a Response object.
/// \param data Data returned from server.
///
/// \param response Provides response metadata, such as HTTP headers and status code.
///
/// \param error Indicates why the request failed, or nil if the request was successful.
///
- (nonnull instancetype)initWithData:(NSData * _Nullable)data statusCode:(NSInteger)statusCode response:(NSHTTPURLResponse * _Nullable)response error:(UBSDKError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Category of scope that describes its level of access.
/// <ul>
///   <li>
///     General:    scopes that can be used without review.
///   </li>
///   <li>
///     Privileged: scopes that require approval before opened to your users in production.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ScopeType, closed) {
  ScopeTypeGeneral = 0,
  ScopeTypePrivileged = 1,
};


/// Manager class for saving and deleting AccessTokens. Allows you to manage tokens based on token identifier & keychain access group
SWIFT_CLASS_NAMED("TokenManager")
@interface UBSDKTokenManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenManagerDidSaveTokenNotification;)
+ (NSString * _Nonnull)tokenManagerDidSaveTokenNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tokenManagerDidDeleteTokenNotification;)
+ (NSString * _Nonnull)tokenManagerDidDeleteTokenNotification SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken for the given tokenIdentifier and accessGroup.
/// \param identifier The token identifier string to use
///
/// \param accessGroup The keychain access group to use
///
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchTokenWithIdentifier:(NSString * _Nonnull)identifier accessGroup:(NSString * _Nonnull)accessGroup SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken for the given tokenIdentifier.
/// Uses the default value for keychain access group, as defined by your Configuration.
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchTokenWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Gets the AccessToken using the default tokenIdentifier and accessGroup.
/// These values are the defined in your Configuration
///
/// returns:
/// An AccessToken, or nil if one wasn’t found
+ (UBSDKAccessToken * _Nullable)fetchToken SWIFT_WARN_UNUSED_RESULT;
/// Saves the given AccessToken using the provided tokenIdentifier and acessGroup.If no values
/// are supplied, it uses the defaults defined in your Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.shared.defaultAccessTokenIdentifier)
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.shared.defaultKeychainAccessGroup)
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier accessGroup:(NSString * _Nonnull)accessGroup;
/// Saves the given AccessToken using the provided tokenIdentifier.
/// Uses the default keychain access group defined by your Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken tokenIdentifier:(NSString * _Nonnull)tokenIdentifier;
/// Saves the given AccessToken.
/// Uses the default access token identifier & keychain access group defined by your
/// Configuration.
/// Access Token is saved syncronously
/// \param accessToken The AccessToken to save
///
///
/// returns:
/// true if the accessToken was saved successfully, false otherwise
+ (BOOL)saveWithAccessToken:(UBSDKAccessToken * _Nonnull)accessToken;
/// Deletes the AccessToken for the givent tokenIdentifier and accessGroup. If no values
/// are supplied, it uses the defaults defined in your Configuration.
/// \param tokenIdentifier The token identifier string to use (defaults to Configuration.shared.defaultAccessTokenIdentifier)
///
/// \param accessGroup The keychain access group to use (defaults to Configuration.shared.defaultKeychainAccessGroup)
///
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteTokenWithIdentifier:(NSString * _Nonnull)identifier accessGroup:(NSString * _Nonnull)accessGroup;
/// Deletes the AccessToken for the given tokenIdentifier.
/// Uses the default keychain access group defined in your Configuration.
/// \param tokenIdentifier The token identifier string to use
///
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteTokenWithIdentifier:(NSString * _Nonnull)identifier;
/// Deletes an AccessToken.
/// Uses the default token identifier defined in your Configuration.
/// Uses the default keychain access group defined in your Configuration.
///
/// returns:
/// true if the token was deleted, false otherwise
+ (BOOL)deleteToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Responsible for parsing any events that require switching to the Uber app.
/// Designed to mimic methods from your application’s AppDelegate and should
/// be called inside their corresponding methods
SWIFT_CLASS_NAMED("UberAppDelegate")
@interface UBSDKAppDelegate : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKAppDelegate * _Nonnull shared;)
+ (UBSDKAppDelegate * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <LoginManaging> _Nullable loginManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Handles parsing a deeplink that can be handled by the Rides SDK. Should be
/// be called in your ApplicationDelegate:
/// application:openURL:sourceApplication:annotation: (iOS 8)
/// OR
/// app:openURL:options: (iOS 9+), passing in options[UIApplicationOpenURLOptionsSourceApplicationKey] as sourceApplication
/// \param application Your singleton app object. As passed to the corresponding AppDelegate method
///
/// \param url The URL resource to open. As passed to the corresponding AppDelegate methods
///
/// \param sourceApplication The bundle ID of the app that is requesting
/// your app to open the URL (url). As passed to the corresponding AppDelegate method (iOS 8) or
/// options[UIApplicationOpenURLOptionsSourceApplicationKey] (iOS 9+)
///
/// \param annotation A property list object supplied by the source app to
/// communicate information to the receiving app As passed to the corresponding AppDelegate method
///
///
/// returns:
/// true if the URL was intended for the Rides SDK, false otherwise
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
@end

/// Possible authentication errors.
/// <ul>
///   <li>
///     AccessDenied:            The user denied the requested scopes.
///   </li>
///   <li>
///     ExpiredJWT:              The scope accept session expired.
///   </li>
///   <li>
///     GeneralError:            A general error occured.
///   </li>
///   <li>
///     InternalServerError:     An internal server error occured.
///   </li>
///   <li>
///     InvalidAppSignature:     The provided app signature did not match what was expected.
///   </li>
///   <li>
///     InvalidAuthCode:         There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidClientID:         Invalid client ID provided for authentication.
///   </li>
///   <li>
///     InvalidFlowError:        There was a problem displaying the authorize screen.
///   </li>
///   <li>
///     InvalidJWT:              There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidJWTSignature:     There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidNonce:            There was a problem authorizing you.
///   </li>
///   <li>
///     InvalidRedirect:         Redirect URI provided was invalid
///   </li>
///   <li>
///     InvalidRefreshToken:     The provided Refresh Token was invalid
///   </li>
///   <li>
///     InvalidRequest:          General case for invalid requests.
///   </li>
///   <li>
///     InvalidResponse:         The response from the server was un-parseable
///   </li>
///   <li>
///     InvalidScope:            Scopes provided contains an invalid scope.
///   </li>
///   <li>
///     InvalidSSOResponse:      The server responded with an invalid response.
///   </li>
///   <li>
///     InvalidUserID:           There was a problem with your user ID.
///   </li>
///   <li>
///     MalformedRequest:        There was a problem loading the authorize screen.
///   </li>
///   <li>
///     MismatchingRedirect:     Redirect URI provided doesn’t match one registered for client ID.
///   </li>
///   <li>
///     NetworkError:            A network error occured
///   </li>
///   <li>
///     ServerError:             A server error occurred during authentication.
///   </li>
///   <li>
///     UnableToPresentLogin:    Unable to present the login screen
///   </li>
///   <li>
///     UnableToSaveAccessToken: There was a problem saving the access token
///   </li>
///   <li>
///     Unavailable:             Authentication services temporarily unavailable.
///   </li>
///   <li>
///     UserCancelled:           User cancelled the auth process
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKAuthenticationErrorType, "UberAuthenticationErrorType", closed) {
  UBSDKAuthenticationErrorTypeAccessDenied = 0,
  UBSDKAuthenticationErrorTypeExpiredJWT = 1,
  UBSDKAuthenticationErrorTypeGeneralError = 2,
  UBSDKAuthenticationErrorTypeInternalServerError = 3,
  UBSDKAuthenticationErrorTypeInvalidAppSignature = 4,
  UBSDKAuthenticationErrorTypeInvalidAuthCode = 5,
  UBSDKAuthenticationErrorTypeInvalidClientID = 6,
  UBSDKAuthenticationErrorTypeInvalidFlowError = 7,
  UBSDKAuthenticationErrorTypeInvalidJWT = 8,
  UBSDKAuthenticationErrorTypeInvalidJWTSignature = 9,
  UBSDKAuthenticationErrorTypeInvalidNonce = 10,
  UBSDKAuthenticationErrorTypeInvalidRedirect = 11,
  UBSDKAuthenticationErrorTypeInvalidRefreshToken = 12,
  UBSDKAuthenticationErrorTypeInvalidRequest = 13,
  UBSDKAuthenticationErrorTypeInvalidResponse = 14,
  UBSDKAuthenticationErrorTypeInvalidScope = 15,
  UBSDKAuthenticationErrorTypeInvalidSSOResponse = 16,
  UBSDKAuthenticationErrorTypeInvalidUserID = 17,
  UBSDKAuthenticationErrorTypeMalformedRequest = 18,
  UBSDKAuthenticationErrorTypeMismatchingRedirect = 19,
  UBSDKAuthenticationErrorTypeNetworkError = 20,
  UBSDKAuthenticationErrorTypeServerError = 21,
  UBSDKAuthenticationErrorTypeUnableToPresentLogin = 22,
  UBSDKAuthenticationErrorTypeUnableToSaveAccessToken = 23,
  UBSDKAuthenticationErrorTypeUnavailable = 24,
  UBSDKAuthenticationErrorTypeUserCancelled = 25,
};


typedef SWIFT_ENUM(NSInteger, UberButtonColor, closed) {
  UberButtonColorUberBlack = 0,
  UberButtonColorUberWhite = 1,
  UberButtonColorBlackHighlighted = 2,
  UberButtonColorWhiteHighlighted = 3,
};

typedef SWIFT_ENUM(NSInteger, UberButtonColorStyle, closed) {
  UberButtonColorStyleBlack = 0,
  UberButtonColorStyleWhite = 1,
};


/// Base class for errors that can be mapped from HTTP responses.
SWIFT_CLASS_NAMED("UberError")
@interface UBSDKError : NSObject
/// HTTP status code for error.
@property (nonatomic, readonly) NSInteger status;
/// Human readable message which corresponds to the client error.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Underscore delimited string.
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// Additional information about errors. Can be “fields” or “meta” as the key.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable meta;
/// List of additional errors. This can be populated instead of status/code/title.
@property (nonatomic, readonly, copy) NSArray<UBSDKError *> * _Nullable errors;
/// Convenience initializer.
/// \param status The Status code to use for this error
///
/// \param code The underscore delimited code string to use for this error
///
/// \param title Human readable message which corresponds to this error
///
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Client error 4xx.
SWIFT_CLASS_NAMED("UberClientError")
@interface UBSDKClientError : UBSDKError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end


enum UberScopeType : NSInteger;

/// Object representing an access scope to the Uber API
SWIFT_CLASS_NAMED("UberScope")
@interface UBSDKScope : NSObject
/// The UberScopeType of this UberScope
@property (nonatomic, readonly) enum UberScopeType uberScopeType;
/// The ScopeType of this UberScope (General / Privileged)
@property (nonatomic, readonly) enum ScopeType scopeType;
/// The String raw value of the scope
@property (nonatomic, readonly, copy) NSString * _Nonnull rawValue;
- (nonnull instancetype)initWithUberScopeType:(enum UberScopeType)uberScopeType OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Convenience variable for the AllTrips scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull allTrips;)
+ (UBSDKScope * _Nonnull)allTrips SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the History scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull history;)
+ (UBSDKScope * _Nonnull)history SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the HistoryLite scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull historyLite;)
+ (UBSDKScope * _Nonnull)historyLite SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Places scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull places;)
+ (UBSDKScope * _Nonnull)places SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Profile scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull profile;)
+ (UBSDKScope * _Nonnull)profile SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the Request scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull request;)
+ (UBSDKScope * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the RequestReceipt scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull requestReceipt;)
+ (UBSDKScope * _Nonnull)requestReceipt SWIFT_WARN_UNUSED_RESULT;
/// Convenience variable for the RideWidgets scope
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UBSDKScope * _Nonnull rideWidgets;)
+ (UBSDKScope * _Nonnull)rideWidgets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Scopes control the various API endpoints your application can access.
/// <ul>
///   <li>
///     AllTrips:       Get details of the trip the user is currently taking.
///   </li>
///   <li>
///     History:        Pull trip data of a user’s historical pickups and drop-offs.
///   </li>
///   <li>
///     HistoryLite:    Same as History without city information.
///   </li>
///   <li>
///     Places:         Save and retrieve user’s favorite places.
///   </li>
///   <li>
///     Profile:        Access basic profile information on a user’s Uber account.
///   </li>
///   <li>
///     Request:        Make requests for Uber rides on behalf of users.
///   </li>
///   <li>
///     RideReceipt:    Get receipt details for requests made by application.
///   </li>
///   <li>
///     RideWidgets:    The scope for using the Ride Request Widget.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, UberScopeType, closed) {
  UberScopeTypeAllTrips = 0,
  UberScopeTypeHistory = 1,
  UberScopeTypeHistoryLite = 2,
  UberScopeTypePlaces = 3,
  UberScopeTypeProfile = 4,
  UberScopeTypeRequest = 5,
  UberScopeTypeRequestReceipt = 6,
  UberScopeTypeRideWidgets = 7,
};


/// Server error 5xx.
SWIFT_CLASS_NAMED("UberServerError")
@interface UBSDKServerError : UBSDKError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end


/// Unknown error type.
SWIFT_CLASS_NAMED("UberUnknownError")
@interface UBSDKUnknownError : UBSDKError
- (nonnull instancetype)initWithStatus:(NSInteger)status code:(NSString * _Nullable)code title:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
