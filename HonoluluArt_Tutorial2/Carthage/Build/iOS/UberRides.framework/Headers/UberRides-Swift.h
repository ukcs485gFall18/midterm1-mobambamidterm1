// Generated by Apple Swift version 4.2 effective-4.1.50 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UberCore;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="UberRides",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UBSDKRideParameters;

/// Protocol for an object that defines how to request a ride. Is expected to be used
/// by any control that can request a ride for a user.
SWIFT_PROTOCOL_NAMED("RideRequesting")
@protocol UBSDKRideRequesting
/// Requests a ride using the provided RideParameters.
/// \param parameters The RideParameters to use for the ride request
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)parameters;
@end


SWIFT_CLASS_NAMED("DeeplinkRequestingBehavior")
@interface UBSDKDeeplinkRequestingBehavior : NSObject <UBSDKRideRequesting>
- (nonnull instancetype)initWithFallbackType:(enum UBSDKDeeplinkFallbackType)fallbackType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Requests a ride using a RequestDeeplink that is constructed using the provided
/// rideParameters
/// \param rideParameters The RideParameters to use for building and executing
/// the deeplink
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)rideParameters;
@end

@class NSNumber;

/// Estimate information on an Uber trip.
SWIFT_CLASS_NAMED("DistanceEstimate")
@interface UBSDKDistanceEstimate : NSObject
/// Expected activity distance.
@property (nonatomic, readonly, strong) NSNumber * _Nullable distance;
/// The unit of distance (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nullable distanceUnit;
/// Expected activity duration (in seconds).
@property (nonatomic, readonly, strong) NSNumber * _Nullable duration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Contains information for an Uber driver dispatched for a ride request.
SWIFT_CLASS_NAMED("Driver")
@interface UBSDKDriver : NSObject
/// The first name of the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The URL to the photo of the driver.
@property (nonatomic, readonly, copy) NSURL * _Nullable pictureURL;
/// The formatted phone number for calling the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable phoneNumber;
/// The formatted phone number for sending a SMS to the driver.
@property (nonatomic, readonly, copy) NSString * _Nullable smsNumber;
/// The driver’s star rating out of 5 stars.
@property (nonatomic, readonly, strong) NSNumber * _Nullable rating;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol UBSDKModalViewControllerDelegate;
enum ModalViewControllerColorStyle : NSInteger;
enum ModalViewControllerButtonStyle : NSInteger;
@class NSCoder;
@class NSBundle;

/// Convenience to wrap a ViewController in a UINavigationController and add the appropriate buttons. Allows you to modally present a view controller w/ Uber branding.
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_CLASS_NAMED("ModalViewController")
@interface UBSDKModalViewController : UIViewController
/// The ModalViewControllerDelegate
@property (nonatomic, strong) id <UBSDKModalViewControllerDelegate> _Nullable delegate;
@property (nonatomic) enum ModalViewControllerColorStyle colorStyle;
/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController
/// with the appropriate buttons.
/// \param childViewController The child UIViewController to wrap
///
/// \param buttonStyle The ModalViewControllerButtonStyle to use
///
///
/// returns:
/// An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController buttonStyle:(enum ModalViewControllerButtonStyle)buttonStyle OBJC_DESIGNATED_INITIALIZER;
/// Initializes a ModalViewController for the given childViewController and style inside a UINavigationController
/// with the appropriate buttons.
/// Defaults to the .DoneButton ModalViewControllerButtonStyle style
/// \param childViewController The child UIViewController to wrap
///
///
/// returns:
/// An initialized ModalViewController
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController;
/// Unavailable. ModalViewController doesn’t support being initialized via
/// init(coder:)
///
/// throws:
/// Fatal Error
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;
/// Function to dimiss the modalViewController.
- (void)dismiss;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UBSDKRideRequestViewController;

/// Modal View Controller to use for presenting a RideRequestViewController. Handles errors & closing the modal for you
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_CLASS_NAMED("ModalRideRequestViewController")
@interface UBSDKModalRideRequestViewController : UBSDKModalViewController
/// The RideRequestViewController this modal is wrapping
@property (nonatomic, readonly, strong) UBSDKRideRequestViewController * _Nonnull rideRequestViewController;
/// Initializer for the ModalRideRequestViewController. Wraps the provided RideRequestViewController
/// and acts as it’s delegate. Will handle errors coming in via the RideRequestViewControllerDelegate
/// and dismiss the modal appropriately
/// \param rideRequestViewController The RideRequestViewController to wrap
///
///
/// returns:
/// An initialized ModalRideRequestViewController
- (nonnull instancetype)initWithRideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithChildViewController:(UIViewController * _Nonnull)childViewController buttonStyle:(enum ModalViewControllerButtonStyle)buttonStyle SWIFT_UNAVAILABLE;
@end

@class NSError;

/// Delegate Protocol to pass errors from the internal RideRequestView outward if necessary.
/// For example, you might want to dismiss the View Controller if it experiences an error
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_PROTOCOL_NAMED("RideRequestViewControllerDelegate")
@protocol UBSDKRideRequestViewControllerDelegate
/// Delegate method to pass on errors from the RideRequestView that can’t be handled
/// by the RideRequestViewController
/// \param rideRequestViewController The RideRequestViewController that experienced the error
///
/// \param error The NSError that was experienced, with a code related to the appropriate RideRequestViewErrorType
///
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKModalRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewControllerDelegate>
/// ModalRideRequestViewController’s implmentation for the RideRequestViewController delegate.
/// \param rideRequestViewController The RideRequestViewController that experienced an error
///
/// \param error The RideRequestViewError that occured
///
- (void)rideRequestViewController:(UBSDKRideRequestViewController * _Nonnull)rideRequestViewController didReceiveError:(NSError * _Nonnull)error;
@end


/// Possible Styles for the ModalViewController
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
/// <ul>
///   <li>
///     Empty:       Presents the view modally without any BarButtonItems
///   </li>
///   <li>
///     DoneButton:  Presents the view mdoally with a Done BarButtonItem in the top right corner
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerButtonStyle, closed) {
  ModalViewControllerButtonStyleEmpty = 0,
  ModalViewControllerButtonStyleDoneButton = 1,
  ModalViewControllerButtonStyleBackButton = 2,
};

/// Possible color style for the ModalViewController
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
/// <ul>
///   <li>
///     Default: Default dark style, dark navigation bar with light text
///   </li>
///   <li>
///     Light:   Light color style, light navigation bar with dark text
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, ModalViewControllerColorStyle, closed) {
  ModalViewControllerColorStyleDefault = 0,
  ModalViewControllerColorStyleLight = 1,
};


/// The ModalViewControllerDelegate protocol
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_PROTOCOL_NAMED("ModalViewControllerDelegate")
@protocol UBSDKModalViewControllerDelegate
/// Called before the ModalViewController dismisses the modal.
/// \param modalViewController The ModalViewController that will be dismissed
///
- (void)modalViewControllerWillDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;
/// Called after the ModalViewController is dismissed.
/// \param modalViewController The ModalViewController that was dismissed
///
- (void)modalViewControllerDidDismiss:(UBSDKModalViewController * _Nonnull)modalViewController;
@end


SWIFT_CLASS_NAMED("PaymentMethod")
@interface UBSDKPaymentMethod : NSObject
/// The account identification or description associated with the payment method.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentDescription;
/// Unique identifier of the payment method.
@property (nonatomic, readonly, copy) NSString * _Nullable methodID;
/// The type of the payment method. See https://developer.uber.com/docs/v1-payment-methods.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Describes a pre-set place for an Uber account (home or work).
SWIFT_CLASS_NAMED("Place")
@interface UBSDKPlace : NSObject
/// Convenience constant for “home” place ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull home;)
+ (NSString * _Nonnull)home SWIFT_WARN_UNUSED_RESULT;
/// Convenience constant for “work” place ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull work;)
+ (NSString * _Nonnull)work SWIFT_WARN_UNUSED_RESULT;
/// Fully qualified address of the location.
@property (nonatomic, readonly, copy) NSString * _Nullable address;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UBSDKServiceFee;

/// <ul>
///   <li>
///     Contains basic price details for an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PriceDetails")
@interface UBSDKPriceDetails : NSObject
/// Unit of distance used to calculate fare (mile or km).
@property (nonatomic, readonly, copy) NSString * _Nullable distanceUnit;
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// The charge per minute (if applicable).
@property (nonatomic, readonly, strong) NSNumber * _Nullable costPerMinute;
/// The charge per distance unit (if applicable).
@property (nonatomic, readonly, strong) NSNumber * _Nullable costPerDistance;
/// The base price.
@property (nonatomic, readonly, strong) NSNumber * _Nullable baseFee;
/// The minimum price of a trip.
@property (nonatomic, readonly, strong) NSNumber * _Nullable minimumFee;
/// The fee if a rider cancels the trip after a grace period.
@property (nonatomic, readonly, strong) NSNumber * _Nullable cancellationFee;
/// Array containing additional fees added to the price. See <code>ServiceFee</code>.
@property (nonatomic, readonly, copy) NSArray<UBSDKServiceFee *> * _Nullable serviceFees;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Contains information about estimated price range for each Uber product offered at a location.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("PriceEstimate")
@interface UBSDKPriceEstimate : NSObject
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// Expected activity distance (in miles).
@property (nonatomic, readonly, strong) NSNumber * _Nullable distance;
/// Expected activity duration (in seconds).
@property (nonatomic, readonly, strong) NSNumber * _Nullable duration;
/// A formatted string representing the estimate in local currency. Could be range, single number, or “Metered” for TAXI.
@property (nonatomic, readonly, copy) NSString * _Nullable estimate;
/// Upper bound of the estimated price.
@property (nonatomic, readonly, strong) NSNumber * _Nullable highEstimate;
/// Lower bound of the estimated price.
@property (nonatomic, readonly, strong) NSNumber * _Nullable lowEstimate;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// The unique identifier of the surge session for a user. Nil for no surge.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;
/// The URL a user must visit to accept surge pricing.
@property (nonatomic, readonly, copy) NSURL * _Nullable surgeConfirmationURL;
/// Expected surge multiplier (active if surge is greater than 1).
@property (nonatomic, readonly, strong) NSNumber * _Nullable surgeMultiplier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum UBSDKProductGroup : NSInteger;

/// <ul>
///   <li>
///     Contains information for a single Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("Product")
@interface UBSDKProduct : NSObject
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Description of product. Ex: “The original Uber”.
@property (nonatomic, readonly, copy) NSString * _Nullable productDescription;
/// Capacity of product. Ex: 4, for a product that fits 4.
@property (nonatomic, readonly, strong) NSNumber * _Nullable objc_capacity;
/// Image URL representing the product.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
/// The basic price details. See <code>PriceDetails</code> for structure.
@property (nonatomic, readonly, strong) UBSDKPriceDetails * _Nullable priceDetails;
/// Specifies whether this product allows users to get upfront fares, instead of time + distance. Boolean value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable objc_upfrontFareEnabled;
/// Specifies whether this product allows cash payments. Boolean value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable objc_cashEnabled;
/// Specifies whether this product allows for the pickup and drop off of other riders during the trip. Boolean value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable objc_isShared;
/// The product group that this product belongs to
@property (nonatomic, readonly) enum UBSDKProductGroup productGroup;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Uber Product Category
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKProductGroup, "ProductGroup", closed) {
/// Shared rides products (eg, UberPOOL)
  UBSDKProductGroupRideshare = 0,
/// UberX
  UBSDKProductGroupUberX = 1,
/// UberXL
  UBSDKProductGroupUberXL = 2,
/// UberBLACK
  UBSDKProductGroupUberBlack = 3,
/// UberSUV
  UBSDKProductGroupSuv = 4,
/// 3rd party taxis
  UBSDKProductGroupTaxi = 5,
/// Unknown product group
  UBSDKProductGroupUnknown = 6,
};


/// Builds and executes a deeplink to the native Uber app to request a ride.
SWIFT_CLASS_NAMED("RequestDeeplink")
@interface UBSDKRequestDeeplink : UBSDKBaseDeeplink
/// Initialize a ride request deeplink. If the Uber app is not installed, fallback to the App Store.
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;
/// Initialize a ride request deeplink.
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters fallbackType:(enum UBSDKDeeplinkFallbackType)fallbackType OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull fallbackURLs;
- (nullable instancetype)initWithScheme:(NSString * _Nonnull)scheme host:(NSString * _Nonnull)host path:(NSString * _Nonnull)path queryItems:(NSArray<NSURLQueryItem *> * _Nullable)queryItems SWIFT_UNAVAILABLE;
@end

@class UBSDKRideRequestLocation;
enum UBSDKRideStatus : NSInteger;
@class UBSDKVehicle;

/// Contains the status of an ongoing/completed trip created using the Ride Request endpoint
SWIFT_CLASS_NAMED("Ride")
@interface UBSDKRide : NSObject
/// Contains the information about the destination of the trip, if one has been set.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable destination;
/// The object that contains driver details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKDriver * _Nullable driver;
/// The object that contains the location information of the vehicle and driver.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable driverLocation;
/// The object containing the information about the pickup for the trip.
@property (nonatomic, readonly, strong) UBSDKRideRequestLocation * _Nullable pickup;
/// The unique ID of the Request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;
/// The ID of the product
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// The status of the Request indicating state.
@property (nonatomic, readonly) enum UBSDKRideStatus status;
/// The surge pricing multiplier used to calculate the increased price of a Request.
@property (nonatomic, readonly, strong) NSNumber * _Nullable surgeMultiplier;
/// The object that contains vehicle details. Only non-null during an ongoing trip.
@property (nonatomic, readonly, strong) UBSDKVehicle * _Nullable vehicle;
/// True if the ride is an UberPOOL ride. False otherwise.
@property (nonatomic, readonly, strong) NSNumber * _Nullable isShared;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Describes the charges made against the rider in a ride receipt.
SWIFT_CLASS_NAMED("RideCharge")
@interface UBSDKRideCharge : NSObject
/// The amount of the charge.
@property (nonatomic, readonly, strong) NSNumber * _Nullable amount;
/// The name of the charge.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The type of the charge.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UBSDKUpfrontFare;

/// Contains estimates for a desired ride request.
SWIFT_CLASS_NAMED("RideEstimate")
@interface UBSDKRideEstimate : NSObject
/// Details of the estimated fare.
@property (nonatomic, readonly, strong) UBSDKPriceEstimate * _Nullable priceEstimate;
/// Details of the estimated distance.
@property (nonatomic, readonly, strong) UBSDKDistanceEstimate * _Nullable distanceEstimate;
/// The estimated time of vehicle arrival in minutes. UBSDKEstimateUnavailable if there are no cars available.
@property (nonatomic, readonly, strong) NSNumber * _Nullable pickupEstimate;
/// Upfront Fare for the Ride Estimate.
@property (nonatomic, readonly, strong) UBSDKUpfrontFare * _Nullable fare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Visual representation of a ride request, only available after a request is accepted.
SWIFT_CLASS_NAMED("RideMap")
@interface UBSDKRideMap : NSObject
/// URL to a map representing the requested trip.
@property (nonatomic, readonly, copy) NSURL * _Nullable path;
/// Unique identifier representing a ride request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class CLLocation;
@class UBSDKRideParametersBuilder;

/// Object to represent the parameters needed to request a ride.
SWIFT_CLASS_NAMED("RideParameters")
@interface UBSDKRideParameters : NSObject
/// ProductID to use for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// The pickup location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable pickupLocation;
/// The nickname of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupNickname;
/// The address of the pickup location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable pickupAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable pickupPlaceID;
/// The dropoff location to use for the ride
@property (nonatomic, readonly, strong) CLLocation * _Nullable dropoffLocation;
/// The nickname of the dropoff location for the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffNickname;
/// The adress of the dropoff location of the ride
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, readonly, copy) NSString * _Nullable dropoffPlaceID;
/// The unique identifier of the payment method selected by a user.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentMethod;
/// The unique identifier of the surge session for a user.
@property (nonatomic, readonly, copy) NSString * _Nullable surgeConfirmationID;
/// Upfront fare quote used to request a ride
@property (nonatomic, readonly, strong) UBSDKUpfrontFare * _Nullable upfrontFare;
- (UBSDKRideParametersBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RideParametersBuilder")
@interface UBSDKRideParametersBuilder : NSObject
/// ProductID to use for the ride
@property (nonatomic, copy) NSString * _Nullable productID;
/// The pickup location to use for the ride
@property (nonatomic, strong) CLLocation * _Nullable pickupLocation;
/// The nickname of the pickup location of the ride
@property (nonatomic, copy) NSString * _Nullable pickupNickname;
/// The address of the pickup location of the ride
@property (nonatomic, copy) NSString * _Nullable pickupAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, copy) NSString * _Nullable pickupPlaceID;
/// The dropoff location to use for the ride
@property (nonatomic, strong) CLLocation * _Nullable dropoffLocation;
/// The nickname of the dropoff location for the ride
@property (nonatomic, copy) NSString * _Nullable dropoffNickname;
/// The adress of the dropoff location of the ride
@property (nonatomic, copy) NSString * _Nullable dropoffAddress;
/// This is the name of an Uber saved place. Only “home” or “work” is acceptable.
@property (nonatomic, copy) NSString * _Nullable dropoffPlaceID;
/// The unique identifier of the payment method selected by a user.
@property (nonatomic, copy) NSString * _Nullable paymentMethod;
/// The unique identifier of the surge session for a user.
@property (nonatomic, copy) NSString * _Nullable surgeConfirmationID;
/// Upfront fare quote used to request a ride
@property (nonatomic, strong) UBSDKUpfrontFare * _Nullable upfrontFare;
- (UBSDKRideParameters * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Get the receipt information of a completed request that was made with the request endpoint.
SWIFT_CLASS_NAMED("RideReceipt")
@interface UBSDKRideReceipt : NSObject
/// Adjustments made to the charges such as promotions, and fees.
@property (nonatomic, readonly, copy) NSArray<UBSDKRideCharge *> * _Nullable chargeAdjustments;
/// ISO 4217
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// Distance of the trip charged.
@property (nonatomic, readonly, copy) NSString * _Nullable distance;
/// The localized unit of distance.
@property (nonatomic, readonly, copy) NSString * _Nullable distanceLabel;
/// Time duration of the trip. Use only the hour, minute, and second components.
@property (nonatomic, readonly, copy) NSDateComponents * _Nullable duration;
/// Unique identifier representing a Request.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;
/// The summation of the normal fare and surge charge amount.
@property (nonatomic, readonly, copy) NSString * _Nullable subtotal;
/// The total amount charged to the users payment method. This is the the subtotal (split if applicable) with taxes included.
@property (nonatomic, readonly, copy) NSString * _Nullable totalCharged;
/// The total amount still owed after attempting to charge the user. May be 0 if amount was paid in full.
@property (nonatomic, readonly, strong) NSNumber * _Nullable totalOwed;
/// The fare after credits and refunds have been applied.
@property (nonatomic, readonly, copy) NSString * _Nullable totalFare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol UBSDKRideRequestButtonDelegate;
@class UBSDKRidesClient;

/// RequestButton implements a button on the touch screen to request a ride.
SWIFT_CLASS_NAMED("RideRequestButton")
@interface UBSDKRideRequestButton : UBSDKUberButton
/// Delegate is informed of events that occur with request button.
@property (nonatomic, strong) id <UBSDKRideRequestButtonDelegate> _Nullable delegate;
/// The RideParameters object this button will use to make a request
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;
/// The RideRequesting object the button will use to make a request
@property (nonatomic, strong) id <UBSDKRideRequesting> _Nonnull requestBehavior;
/// The RidesClient used for retrieving metadata for the button.
@property (nonatomic, strong) UBSDKRidesClient * _Nullable client;
/// Initializer to use in storyboard. Must call setRidesClient for request button to show metadata.
/// requestBehavior defaults to DeeplinkRequestingBehavior
/// rideParameters defaults to RideParameters with pickup location set to current location
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The Request button initializer.
/// \param client The RidesClient to use for getting button metadata
///
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior OBJC_DESIGNATED_INITIALIZER;
/// The Request button initializer.
/// Uses a default RidesClient
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters requestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;
/// The RideRequestButton initializer.
/// Uses DeeplinkRequestingBehavior by default
/// Defaults to using the current location for pickup
/// \param client The RidesClient to use for getting button metadata
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithClient:(UBSDKRidesClient * _Nonnull)client;
/// The RideRequestButton initializer. Creates a request button that uses the Deeplink
/// Requesting behavior & the provided RidesParameters
/// Uses a default RidesClient
/// \param rideParameters The RideParameters for this button. These parameters are used to request a ride when the button is tapped.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;
/// The RideRequestButton initializer.
/// Defaults to using the current location for pickup
/// Uses a default RidesClient
/// \param requestingBehavior The RideRequesting object to use for requesting a ride.
///
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)initWithRequestingBehavior:(id <UBSDKRideRequesting> _Nonnull)requestingBehavior;
/// The Request button initializer.
/// Defaults to using the current location for pickup
/// Defaults to DeeplinkRequestingBehavior, which links into the Uber app
/// Uses a default RidesClient
///
/// returns:
/// An initialized RideRequestButton
- (nonnull instancetype)init;
/// Setup the RideRequestButton by adding  a target to the button and setting the login completion block
- (void)setup;
/// Adds the Metadata Label to the button
- (void)addSubviews;
/// Updates the content of the button. Sets the image icon and font, as well as the text
- (void)setContent;
/// Adds the layout constraints for the ride request button.
- (void)setConstraints;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Manual refresh for the ride information on the button. The product ID must be set in order to show any metadata.
- (void)loadRideInformation;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UBSDKError;

/// Protocol to listen to request button events, such as loading button content
SWIFT_PROTOCOL_NAMED("RideRequestButtonDelegate")
@protocol UBSDKRideRequestButtonDelegate
/// The button finished loading ride information successfully.
/// \param button the RideRequestButton
///
- (void)rideRequestButtonDidLoadRideInformation:(UBSDKRideRequestButton * _Nonnull)button;
/// The button encountered an error when refreshing its metadata content.
/// \param button the RideRequestButton
///
/// \param error the error that it encountered
///
- (void)rideRequestButton:(UBSDKRideRequestButton * _Nonnull)button didReceiveError:(UBSDKError * _Nonnull)error;
@end


/// Location of a pickup or destination in a ride request.
SWIFT_CLASS_NAMED("RideRequestLocation")
@interface UBSDKRideRequestLocation : NSObject
/// The alias from an Uber user’s profile mapped to the pickup address (if available).
/// Can be either work or home. Only exposed with a valid access token for places scope.
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// The name of the pickup place (if available). Not exposed in sandbox.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The current bearing in degrees for a moving location.
@property (nonatomic, readonly, strong) NSNumber * _Nullable bearing;
/// ETA is only available when the trips is accepted or arriving.
@property (nonatomic, readonly, strong) NSNumber * _Nullable eta;
/// The latitude of the location.
@property (nonatomic, readonly, strong) NSNumber * _Nullable latitude;
/// The longitude of the location.
@property (nonatomic, readonly, strong) NSNumber * _Nullable longitude;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol UBSDKRideRequestViewDelegate;
@class UBSDKAccessToken;

/// A view that shows the embedded Uber experience.
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_CLASS_NAMED("RideRequestView")
@interface UBSDKRideRequestView : UIView
/// The RideRequestViewDelegate of this view.
@property (nonatomic, strong) id <UBSDKRideRequestViewDelegate> _Nullable delegate;
/// The access token used to authorize the web view
@property (nonatomic, strong) UBSDKAccessToken * _Nullable accessToken;
/// Ther RideParameters to use for prefilling the RideRequestView
@property (nonatomic, strong) UBSDKRideParameters * _Nonnull rideParameters;
/// Initializes to show the embedded Uber ride request view.
/// \param rideParameters The RideParameters to use for presetting values; defaults to using the current location for pickup
///
/// \param accessToken specific access token to use with web view; defaults to using TokenManager’s default token
///
/// \param frame frame of the view. Defaults to CGRectZero
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters accessToken:(UBSDKAccessToken * _Nullable)accessToken frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializes to show the embedded Uber ride request view.
/// Uses the TokenManager’s default accessToken
/// \param rideParameters The RideParameters to use for presetting values
///
/// \param frame frame of the view
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters frame:(CGRect)frame;
/// Initializes to show the embedded Uber ride request view.
/// Frame defaults to CGRectZero
/// Uses the TokenManager’s default accessToken
/// \param rideParameters The RideParameters to use for presetting values
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters;
/// Initializes to show the embedded Uber ride request view.
/// Uses the current location for pickup
/// Uses the TokenManager’s default accessToken
/// \param frame frame of the view
///
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Initializes to show the embedded Uber ride request view.
/// Uses the current location for pickup
/// Uses the TokenManager’s default accessToken
/// Frame defaults to CGRectZero
///
/// returns:
/// An initialized RideRequestView
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load the Uber Ride Request Widget view.
/// Requires that the access token has been retrieved.
- (void)load;
/// Stop loading the Ride Request Widget View and clears the view.
/// If the view has already loaded, calling this still clears the view.
- (void)cancelLoad;
@end

@class UIScrollView;

@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

@interface UBSDKRideRequestView (SWIFT_EXTENSION(UberRides)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
- (void)webView:(WKWebView * _Nonnull)webView didFailProvisionalNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end

@class UBSDKLoginManager;

/// View controller to wrap the RideRequestView
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_CLASS_NAMED("RideRequestViewController")
@interface UBSDKRideRequestViewController : UIViewController
/// The RideRequestViewControllerDelegate to handle the errors
@property (nonatomic, strong) id <UBSDKRideRequestViewControllerDelegate> _Nullable delegate;
/// The LoginManager to use for managing the login process
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// Initializes a RideRequestViewController using the provided coder. By default,
/// uses the default token identifier and access group
/// \param aDecoder The Coder to use
///
///
/// returns:
/// An initialized RideRequestViewController, or nil if something went wrong
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Designated initializer for the RideRequestViewController.
/// \param rideParameters The RideParameters to use for prefilling the RideRequestView.
///
/// \param loginManager The LoginManger to use for logging in (if required). Also uses its values for token identifier & access group to check for an access token
///
///
/// returns:
/// An initialized RideRequestViewController
- (nonnull instancetype)initWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Delegates are informed of events that occur in the RideRequestView such as errors.
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_PROTOCOL_NAMED("RideRequestViewDelegate")
@protocol UBSDKRideRequestViewDelegate
/// An error has occurred in the Ride Request Control.
/// \param rideRequestView the RideRequestView
///
/// \param error the NSError that occured, with a code of RideRequestViewErrorType
///
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end


@interface UBSDKRideRequestViewController (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequestViewDelegate>
- (void)rideRequestView:(UBSDKRideRequestView * _Nonnull)rideRequestView didReceiveError:(NSError * _Nonnull)error;
@end



/// Possible errors that can occur in the RideRequestView.
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
/// <ul>
///   <li>
///     accessTokenMissing:         There is no access token to make the request with
///   </li>
///   <li>
///     accessTokenExpired:         Access token has expired.
///   </li>
///   <li>
///     invalidRequest:             The requested endpoint was invalid
///   </li>
///   <li>
///     networkError:               A network error occured
///   </li>
///   <li>
///     notSupported:               The functionality attempted is not supported on the current device
///   </li>
///   <li>
///     unknown:                    Unknown error occured.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RideRequestViewErrorType, closed) {
  RideRequestViewErrorTypeAccessTokenExpired = 0,
  RideRequestViewErrorTypeAccessTokenMissing = 1,
  RideRequestViewErrorTypeInvalidRequest = 2,
  RideRequestViewErrorTypeNetworkError = 3,
  RideRequestViewErrorTypeNotSupported = 4,
  RideRequestViewErrorTypeUnknown = 5,
};


/// A RideRequesting object for requesting a ride via the RideRequestViewController
/// warning:
/// The Ride Request Widget is deprecated, and will no longer work for new apps.
/// Existing apps have until 05/31/2018 to migrate. See the Uber API Changelog for more details.
SWIFT_CLASS_NAMED("RideRequestViewRequestingBehavior")
@interface UBSDKRideRequestViewRequestingBehavior : NSObject
/// The UIViewController to present the RideRequestViewController over
@property (nonatomic, assign) UIViewController * _Nonnull presentingViewController;
/// The LoginManager to use with the RideRequestViewController. Uses the
/// accessTokenIdentifier & keychainAccessGroup to get an AccessToken. Will be used
/// to log a user in, if necessary
@property (nonatomic, strong) UBSDKLoginManager * _Nonnull loginManager;
/// The ModalRideRequestViewController that is created by this behavior, only exists after requestRide() is called
@property (nonatomic, readonly, strong) UBSDKModalRideRequestViewController * _Nonnull modalRideRequestViewController;
/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller.
/// This view controller will be used to modally present the ModalRideRequestViewController
/// when this behavior is executed
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
/// \param loginManager The LoginManager to use for managing the AccessToken for the RideRequestView
///
///
/// returns:
/// An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController loginManager:(UBSDKLoginManager * _Nonnull)loginManager OBJC_DESIGNATED_INITIALIZER;
/// Creates the RideRequestViewRequestingBehavior with the given presenting view controller.
/// This view controller will be used to modally present the ModalRideRequestViewController
/// when this behavior is executed
/// Uses a default LoginManager() for login & token management
/// \param presentingViewController The UIViewController to present the ModalRideRequestViewController over
///
///
/// returns:
/// An initialized RideRequestViewRequestingBehavior object
- (nonnull instancetype)initWithPresentingViewController:(UIViewController * _Nonnull)presentingViewController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface UBSDKRideRequestViewRequestingBehavior (SWIFT_EXTENSION(UberRides)) <UBSDKRideRequesting>
/// Requests a ride by presenting a RideRequestView that is constructed using the provided
/// rideParameters
/// \param parameters The RideParameters to use for building and prefilling
/// the RideRequestView
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nullable)rideParameters;
@end


/// The status of a ride.
/// <ul>
///   <li>
///     Accepted:           The request was accepted by a driver and “en route” to start location.
///   </li>
///   <li>
///     Arriving:           The driver has arrived or will be shortly.
///   </li>
///   <li>
///     Completed:          Ride has been completed.
///   </li>
///   <li>
///     DriverCanceled:     Ride request has been canceled by the driver.
///   </li>
///   <li>
///     InProgress:         The ride is “en route” from the start location to the end location.
///   </li>
///   <li>
///     NoDriversAvailable: The ride request was unfulfilled because no drivers were available.
///   </li>
///   <li>
///     Processing:         The ride request is matching to the best available driver.
///   </li>
///   <li>
///     RiderCanceled:      The ride request was canceled by rider.
///   </li>
///   <li>
///     Unknown:            An unexpected status.
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKRideStatus, "RideStatus", closed) {
  UBSDKRideStatusAccepted = 0,
  UBSDKRideStatusArriving = 1,
  UBSDKRideStatusCompleted = 2,
  UBSDKRideStatusDriverCanceled = 3,
  UBSDKRideStatusInProgress = 4,
  UBSDKRideStatusNoDriversAvailable = 5,
  UBSDKRideStatusProcessing = 6,
  UBSDKRideStatusRiderCanceled = 7,
  UBSDKRideStatusUnknown = 8,
};

@class NSURLSessionConfiguration;
@class UBSDKResponse;
@class UBSDKTimeEstimate;
@class UBSDKTripHistory;
@class UBSDKUserProfile;

/// API client for the Uber Rides API.
SWIFT_CLASS_NAMED("RidesClient")
@interface UBSDKRidesClient : NSObject
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken. Defaults
/// to the value set in your Configuration struct
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup OBJC_DESIGNATED_INITIALIZER;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
/// \param accessTokenIdentifier Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// \param keychainAccessGroup The keychain access group to use. Uses this group
/// (along with the accessTokenIdentifier) to fetch the appropriate AccessToken. Defaults
/// to the value set in yoru Configuration struct
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier keychainAccessGroup:(NSString * _Nonnull)keychainAccessGroup;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
/// \param sessionConfiguration Configuration to use for NSURLSession. Defaults to defaultSessionConfiguration.
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier sessionConfiguration:(NSURLSessionConfiguration * _Nonnull)sessionConfiguration;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the keychainAccessGroup default from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
/// \param accessTokenIdentifier The accessTokenIdentifier to use. This identifier
/// is used (along with keychainAccessGroup) to fetch the appropriate AccessToken
///
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)initWithAccessTokenIdentifier:(NSString * _Nonnull)accessTokenIdentifier;
/// Initializer for the RidesClient. The RidesClient handles making requests to the API
/// for you.
/// By default, it is initialized using the accessTokenIdentifier & keychainAccessGroup
/// defaults from your Configuration object
/// Also uses NSURLSessionConfiguration.defaultSessionConfiguration() for the URL requests
///
/// returns:
/// An initialized RidesClient
- (nonnull instancetype)init;
/// Retrieves the token used by this rides client.
/// Currently pulls from the keychain each time.
///
/// returns:
/// an AccessToken object, or nil if one can’t be located
- (UBSDKAccessToken * _Nullable)fetchAccessToken SWIFT_WARN_UNUSED_RESULT;
/// Public getter to check for the existence of a server token.
///
/// returns:
/// true if a server token exists, false otherwise.
@property (nonatomic, readonly) BOOL hasServerToken;
/// Get all products at specified location.
/// \param location coordinates of pickup location
///
/// \param completion completion handler for returned products.
///
- (void)fetchProductsWithPickupLocation:(CLLocation * _Nonnull)location completion:(void (^ _Nonnull)(NSArray<UBSDKProduct *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get information for specific product.
/// \param productID string representing product ID.
///
/// \param completion completion handler for returned product.
///
- (void)fetchProductWithProductID:(NSString * _Nonnull)productID completion:(void (^ _Nonnull)(UBSDKProduct * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get time estimates for all products (or specific product) at specified pickup location.
/// \param pickupLocation coordinates of pickup location
///
/// \param productID optional string representing the productID.
///
/// \param completion completion handler for returned estimates.
///
- (void)fetchTimeEstimatesWithPickupLocation:(CLLocation * _Nonnull)location productID:(NSString * _Nullable)productID completion:(void (^ _Nonnull)(NSArray<UBSDKTimeEstimate *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get price estimates for all products between specified pickup and dropoff locations.
/// \param pickupLocation coordinates of pickup location.
///
/// \param dropoffLocation coordinates of dropoff location
///
/// \param completion completion handler for returned estimates.
///
- (void)fetchPriceEstimatesWithPickupLocation:(CLLocation * _Nonnull)pickupLocation dropoffLocation:(CLLocation * _Nonnull)dropoffLocation completion:(void (^ _Nonnull)(NSArray<UBSDKPriceEstimate *> * _Nonnull, UBSDKResponse * _Nonnull))completion;
/// Get trip history for current authenticated user.
/// \param offset offset the list of returned results by this amount. Default is zero.
///
/// \param limit number of items to retrieve. Default is 5, maximum is 50.
///
/// \param completion completion handler for returned user trip history.
///
- (void)fetchTripHistoryWithOffset:(NSInteger)offset limit:(NSInteger)limit completion:(void (^ _Nonnull)(UBSDKTripHistory * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Gets user profile of current authenticated user.
/// \param completion completion handler for returned user profile.
///
- (void)fetchUserProfileWithCompletion:(void (^ _Nonnull)(UBSDKUserProfile * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Request a ride on behalf of Uber user.
/// \param parameters RideParameters object containing paramaters for the request.
///
/// \param completion completion handler for returned request information.
///
- (void)requestRideWithParameters:(UBSDKRideParameters * _Nonnull)parameters completion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get the real-time details for an ongoing ride.
/// \param completion completion handler for returned ride information.
///
- (void)fetchCurrentRideWithCompletion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get the status of an ongoing or completed ride that was created using the Ride Request endpoint.
/// \param requestID unique identifier representing a Request.
///
/// \param completion completion handler for returned trip information.
///
- (void)fetchRideDetailsWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRide * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Estimate a ride request given the desired product, start, and end locations.
/// \param rideParameters RideParameters object containing necessary information.
///
/// \param completion completion handler for returned estimate.
///
- (void)fetchRideRequestEstimateWithParameters:(UBSDKRideParameters * _Nonnull)parameters completion:(void (^ _Nonnull)(UBSDKRideEstimate * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Retrieve the list of the user’s available payment methods.
/// \param completion completion handler for returned payment method list as well as last used payment method.
///
- (void)fetchPaymentMethodsWithCompletion:(void (^ _Nonnull)(NSArray<UBSDKPaymentMethod *> * _Nonnull, UBSDKPaymentMethod * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Retrieve home and work addresses from an Uber user’s profile.
/// \param placeID the name of the place to retrieve. Only home and work are acceptable.
///
/// \param completion completion handler for returned place.
///
- (void)fetchPlaceWithPlaceID:(NSString * _Nonnull)placeID completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Update home and work addresses for an Uber user’s profile.
/// \param placeID the name of the place to update. Only home and work are acceptable.
///
/// \param address the address of the place that should be tied to the given placeID.
///
/// \param completion completion handler for response.
///
- (void)updatePlaceWithPlaceID:(NSString * _Nonnull)placeID withAddress:(NSString * _Nonnull)address completion:(void (^ _Nonnull)(UBSDKPlace * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Update the ride details for an ongoing ride by ID.
/// \param requestID the ID of the ride request. If nil, will attempt to update current trip.
///
/// \param rideParameters the RideParameters object containing the updated parameters.
///
/// \param completion completion handler for response.
///
- (void)updateRideDetailsWithRequestID:(NSString * _Nullable)requestID rideParameters:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Update an ongoing request’s destination that was requested using the Ride Request endpoint.
/// \param rideParameters RideParameters object with updated ride parameters.
///
/// \param completion completion handler for response.
///
- (void)updateCurrentRideWithRideParameters:(UBSDKRideParameters * _Nonnull)rideParameters completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Cancel a user’s ride using the request ID.
/// \param requestID request ID of the ride. If nil, current ride will be canceled.
///
/// \param completion completion handler for response.
///
- (void)cancelRideWithRequestID:(NSString * _Nullable)requestID completion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Cancel the user’s current trip. This endpoint can only be used on trips that your app requested.
/// \param completion completion handler for response
///
- (void)cancelCurrentRideWithCompletion:(void (^ _Nonnull)(UBSDKResponse * _Nonnull))completion;
/// Get the receipt information of a completed request.
/// \param requestID unique identifier representing a ride request
///
/// \param completion completion handler for receipt
///
- (void)fetchRideReceiptWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideReceipt * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get a map with a visual representation of a Request.
/// \param requestID unique identifier representing a request
///
/// \param completion completion handler for map
///
- (void)fetchRideMapWithRequestID:(NSString * _Nonnull)requestID completion:(void (^ _Nonnull)(UBSDKRideMap * _Nullable, UBSDKResponse * _Nonnull))completion;
/// Get a refreshed AccessToken from a refresh token string. Only works for access
/// tokens retrieved via SSO
/// \param refreshToken The Refresh Token String from an SSO access token
///
/// \param completion completion handler for the new access token
///
- (void)refreshAccessTokenUsingRefreshToken:(NSString * _Nonnull)refreshToken completion:(void (^ _Nonnull)(UBSDKAccessToken * _Nullable, UBSDKResponse * _Nonnull))completion;
@end


/// <ul>
///   <li>
///     Contains information for additional fees that can be added to the price of an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ServiceFee")
@interface UBSDKServiceFee : NSObject
/// The name of the service fee.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The amount of the service fee.
@property (nonatomic, readonly, strong) NSNumber * _Nullable fee;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Contains information regarding the ETA of an Uber product.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TimeEstimate")
@interface UBSDKTimeEstimate : NSObject
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
/// Display name of product. Ex: “UberBLACK”.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// ETA for the product (in seconds).
@property (nonatomic, readonly, strong) NSNumber * _Nullable estimate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Information relating to a city in a trip activity.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TripCity")
@interface UBSDKTripCity : NSObject
/// Latitude of city location.
/// warning:
/// Deprecated. Use <code>location</code> instead.
@property (nonatomic, readonly, strong) NSNumber * _Nullable latitude;
/// Longitude of city location.
/// warning:
/// Deprecated. Use <code>location</code> instead.
@property (nonatomic, readonly, strong) NSNumber * _Nullable longitude;
/// City location
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
/// Display name of city.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UBSDKUserActivity;

/// <ul>
///   <li>
///     User’s lifetime trip activity with Uber.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("TripHistory")
@interface UBSDKTripHistory : NSObject
/// Position in pagination.
@property (nonatomic, readonly) NSInteger offset;
/// Number of items retrieved.
@property (nonatomic, readonly) NSInteger limit;
/// Total number of items available.
@property (nonatomic, readonly) NSInteger count;
/// Array of trip information.
@property (nonatomic, readonly, copy) NSArray<UBSDKUserActivity *> * _Nonnull history;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UBSDKUpfrontFareComponent;

SWIFT_CLASS_NAMED("UpfrontFare")
@interface UBSDKUpfrontFare : NSObject
/// A unique upfront fare identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable fareID;
/// The total upfront fare value.
@property (nonatomic, readonly, strong) NSNumber * _Nullable value;
/// ISO 4217 currency code.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// Formatted string of estimate in local currency.
@property (nonatomic, readonly, copy) NSString * _Nullable display;
/// The upfront fare expiration time
@property (nonatomic, readonly, copy) NSDate * _Nullable expiresAt;
/// The components that make up the upfront fare
@property (nonatomic, readonly, copy) NSArray<UBSDKUpfrontFareComponent *> * _Nullable breakdown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum UBSDKUpfrontFareComponentType : NSInteger;

SWIFT_CLASS_NAMED("UpfrontFareComponent")
@interface UBSDKUpfrontFareComponent : NSObject
/// Upfront fare type
@property (nonatomic, readonly) enum UBSDKUpfrontFareComponentType type;
/// Value of the upfront fare component
@property (nonatomic, readonly, strong) NSNumber * _Nullable value;
/// A string that can be displayed to the user representing this portion of the fare
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, UBSDKUpfrontFareComponentType, "UpfrontFareComponentType", closed) {
/// Base fare
  UBSDKUpfrontFareComponentTypeBaseFare = 0,
/// Promotion adjustment
  UBSDKUpfrontFareComponentTypePromotion = 1,
/// Unknown case.
  UBSDKUpfrontFareComponentTypeUnknown = 2,
};


/// <ul>
///   <li>
///     Information regarding an Uber trip in a user’s activity history.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("UserActivity")
@interface UBSDKUserActivity : NSObject
/// Status of the activity. Only returns completed for now.
@property (nonatomic, readonly) enum UBSDKRideStatus status;
/// Length of activity in miles.
@property (nonatomic, readonly, strong) NSNumber * _Nullable distance;
/// Represents timestamp of activity request time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nullable requestTime;
/// Represents timestamp of activity start time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nullable startTime;
/// Represents timestamp of activity end time in current locale.
@property (nonatomic, readonly, copy) NSDate * _Nullable endTime;
/// City that activity started in.
@property (nonatomic, readonly, strong) UBSDKTripCity * _Nullable startCity;
/// Unique activity identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable requestID;
/// Unique identifier representing a specific product for a given latitude & longitude.
@property (nonatomic, readonly, copy) NSString * _Nullable productID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Information regarding an Uber user.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("UserProfile")
@interface UBSDKUserProfile : NSObject
/// First name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
/// Last name of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
/// Email address of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Image URL of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable picturePath;
/// Promo code of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable promoCode;
/// Unique identifier of the Uber user. Deprecated, use riderID instead.
@property (nonatomic, readonly, copy) NSString * _Nullable UUID SWIFT_DEPRECATED_MSG("use riderID instead");
/// Unique identifier of the Uber user.
@property (nonatomic, readonly, copy) NSString * _Nullable riderID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Contains information for an Uber driver’s car.
SWIFT_CLASS_NAMED("Vehicle")
@interface UBSDKVehicle : NSObject
/// The license plate number of the vehicle.
@property (nonatomic, readonly, copy) NSString * _Nullable licensePlate;
/// The vehicle make or brand.
@property (nonatomic, readonly, copy) NSString * _Nullable make;
/// The vehicle model or type.
@property (nonatomic, readonly, copy) NSString * _Nullable model;
/// The URL to a stock photo of the vehicle
@property (nonatomic, readonly, copy) NSURL * _Nullable pictureURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
